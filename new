# Provider configuration
provider "google" {
  credentials = "sravanikey.json"
  project     = "sravani-418405"
  region      = "us-west1"
}

# Create a Virtual Private Cloud (VPC) network
resource "google_compute_network" "vpc_network" {
  name = "my-vpc-network"
}

# Create a subnet within the VPC network
resource "google_compute_subnetwork" "vpc_subnet" {
  name          = "my-vpc-subnet"
  ip_cidr_range = "10.0.0.0/24"
  network       = google_compute_network.vpc_network.name
}

# Create firewall rules to allow HTTP and SSH traffic
resource "google_compute_firewall" "http_firewall" {
  name    = "allow-http"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]
}

resource "google_compute_firewall" "ssh_firewall" {
  name    = "allow-ssh"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = ["0.0.0.0/0"]
}

# Create a Compute Engine instance
resource "google_compute_instance" "app_instance" {
  name         = "app-instance"
  machine_type = "e2-medium"
  zone         = "us-west1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  metadata_startup_script = <<-EOF
    #!/bin/bash
    apt-get update
    apt-get install -y python3
    python3 -m pip install flask

    # Run the app.py application
    cat > /opt/app.py <<EOF2
    from flask import Flask

    app = Flask(__name__)

    @app.route("/")
    def hello():
        return "Hello, SRAVANI!"

    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=80)
    EOF2

    python3 /opt/app.py &
    EOF

  network_interface {
    network    = google_compute_network.vpc_network.name
    subnetwork = google_compute_subnetwork.vpc_subnet.name

    # Assign a static external IP address
    access_config {
      // Specify a static external IP address
      // Replace `YOUR_STATIC_IP_ADDRESS` with your desired static IP address

    }
  }
}
